diff --git a/src/main/com/jwm/drive/domain/interfaces/Engine.java b/src/main/com/jwm/drive/domain/interfaces/Engine.java
index 82808e2..f163a58 100644
--- a/src/main/com/jwm/drive/domain/interfaces/Engine.java
+++ b/src/main/com/jwm/drive/domain/interfaces/Engine.java
@@ -14,7 +14,7 @@ public interface Engine {
 		public double getValue() {
 			return value;
 		}
-	};
+	}
 
 	void update(PedalPress accelerator);
 	double getTorque();
diff --git a/src/main/com/jwm/drive/domain/interfaces/Transmission.java b/src/main/com/jwm/drive/domain/interfaces/Transmission.java
index d5f3878..3a07d6b 100644
--- a/src/main/com/jwm/drive/domain/interfaces/Transmission.java
+++ b/src/main/com/jwm/drive/domain/interfaces/Transmission.java
@@ -2,7 +2,8 @@ package com.jwm.drive.domain.interfaces;
 
 public interface Transmission {
 
-	enum ShiftType { UP, DOWN, TO_N, TO_P };
+	enum ShiftType { UP, DOWN, TO_N, TO_P }
+
 	void update(double engineTorque);
 	double getTorqueLoadPct();
 	void shift(ShiftType shift);
diff --git a/src/main/com/jwm/drive/domain/modelling/Curve.java b/src/main/com/jwm/drive/domain/modelling/Curve.java
index 96d13e2..f48414b 100644
--- a/src/main/com/jwm/drive/domain/modelling/Curve.java
+++ b/src/main/com/jwm/drive/domain/modelling/Curve.java
@@ -2,7 +2,8 @@ package com.jwm.drive.domain.modelling;
 
 public class Curve {
 	
-	public enum CurveDirection { Up, Dn };
+	public enum CurveDirection { Up, Dn }
+
 	private double[] val;
 	private double domainMin, domainMax;
 
diff --git a/src/main/com/jwm/j3dfw/geometry/Rotation.java b/src/main/com/jwm/j3dfw/geometry/Rotation.java
index f721cd3..3dee67a 100644
--- a/src/main/com/jwm/j3dfw/geometry/Rotation.java
+++ b/src/main/com/jwm/j3dfw/geometry/Rotation.java
@@ -61,7 +61,7 @@ public class Rotation extends Transformation {
 
 	public enum RotationDirection {
 		overhead, leftAndRight, endToEnd
-	};
+	}
 
 	public Rotation(double angle, RotationDirection dir) {
 		Vertex v = getVertexForRotationDir(dir);
diff --git a/src/main/com/jwm/j3dfw/geometry/Transformation.java b/src/main/com/jwm/j3dfw/geometry/Transformation.java
index 9c2f426..cac43ac 100644
--- a/src/main/com/jwm/j3dfw/geometry/Transformation.java
+++ b/src/main/com/jwm/j3dfw/geometry/Transformation.java
@@ -5,7 +5,7 @@ import javax.media.opengl.GL2;
 public abstract class Transformation {
 	public enum TransformationType {
 		scale, rotate, translate
-	};
+	}
 
 	protected TransformationType transType;
 
diff --git a/src/main/com/jwm/j3dfw/geometry/Transition.java b/src/main/com/jwm/j3dfw/geometry/Transition.java
index c7a9a35..aab0e9c 100644
--- a/src/main/com/jwm/j3dfw/geometry/Transition.java
+++ b/src/main/com/jwm/j3dfw/geometry/Transition.java
@@ -3,7 +3,7 @@ package com.jwm.j3dfw.geometry;
 public class Transition {
 	public enum TransitionType {
 		LINEAR, EASE_IN_OUT_SIN
-	};
+	}
 
 	private boolean inProgress;
 	private double[] steps;
diff --git a/src/main/com/jwm/j3dfw/production/Scene.java b/src/main/com/jwm/j3dfw/production/Scene.java
index 365a359..ae2846c 100644
--- a/src/main/com/jwm/j3dfw/production/Scene.java
+++ b/src/main/com/jwm/j3dfw/production/Scene.java
@@ -17,7 +17,6 @@ public class Scene implements GLEventListener {
 	private GLU glu;
 	private GeometryList sceneProps;
 	private float viewportWidth;
-	protected double mouseXPositionRelativeToCenter;
 
 	public Scene(GeometryList sceneItems, Camera camera) {
 		log.info("New scene with camera:"+camera+", and sceneItems:" + sceneItems);
diff --git a/src/main/com/jwm/j3dfw/production/Shader.java b/src/main/com/jwm/j3dfw/production/Shader.java
index f265f13..dfe0392 100644
--- a/src/main/com/jwm/j3dfw/production/Shader.java
+++ b/src/main/com/jwm/j3dfw/production/Shader.java
@@ -32,11 +32,11 @@ class Shader {
 		}
 
 		String vsrc = readFromFile(vertexShaderInStream);
-		gl.glShaderSource(v, 1, new String[] { vsrc }, (int[]) null, 0);
+		gl.glShaderSource(v, 1, new String[] { vsrc }, null, 0);
 		gl.glCompileShader(v);
 
 		String fsrc = readFromFile(fragmentShaderInStream);
-		gl.glShaderSource(f, 1, new String[] { fsrc }, (int[]) null, 0);
+		gl.glShaderSource(f, 1, new String[] { fsrc }, null, 0);
 		gl.glCompileShader(f);
 
 		int shaderprogram = gl.glCreateProgram();
